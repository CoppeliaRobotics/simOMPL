<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="callbacks.xsl"?>

<plugin name="simOMPL" author="federico.ferri.it@gmail.com">
    <description>The list of API functions below allows you to define and solve a motion planning problem with OMPL.</description>
    <command name="createStateSpace">
        <description>Create a component of the state space for the motion planning problem.
            <br />
            In case of a dubins state space, set additional parameters with <command-ref name="setDubinsParams" />
        </description>
        <categories>
            <category name="state-space" />
        </categories>
        <params>
            <param name="name" type="string">
                <description>a name for this state space</description>
            </param>
            <param name="type" type="int">
                <description>type of this state space component (see <enum-ref name="StateSpaceType" />)</description>
            </param>
            <param name="objectHandle" type="int">
                <description>the object handle (a joint object if type is simOMPL.StateSpaceType.joint_position or .cyclic_joint_position, otherwise a shape)</description>
            </param>
            <param name="boundsLow" type="table" item-type="double">
                <description>lower bounds (if type is pose, specify only the 3 position components)</description>
            </param>
            <param name="boundsHigh" type="table" item-type="double">
                <description>upper bounds (if type is pose, specify only the 3 position components)</description>
            </param>
            <param name="useForProjection" type="int">
                <description>if true, this object position or joint value will be used for computing a default projection</description>
            </param>
            <param name="weight" type="double" default="1.0">
                <description>the weight of this state space component, used for computing distance between states. Default value is 1.0</description>
            </param>
            <param name="refObjectHandle" type="int" default="-1">
                <description>an object handle relative to which reference frame position/orientations will be evaluated. Default value is -1, for the absolute reference frame</description>
            </param>
        </params>
        <return>
            <param name="stateSpaceHandle" type="string">
                <description>a handle to the created state space component</description>
            </param>
        </return>
    </command>
    <command name="destroyStateSpace">
        <description>Destroy the spacified state space component.
            <br />
            <br />
            Note: state space components created during simulation are automatically destroyed when simulation ends.
        </description>
        <categories>
            <category name="state-space" />
        </categories>
        <params>
            <param name="stateSpaceHandle" type="string">
                <description>handle to state space component</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setDubinsParams">
        <description>Set extra state space parameters of a dubins state space.</description>
        <categories>
            <category name="state-space" />
        </categories>
        <params>
            <param name="stateSpaceHandle" type="string">
                <description>handle to state space component</description>
            </param>
            <param name="turningRadius" type="double">
                <description>turning radius</description>
            </param>
            <param name="isSymmetric" type="bool">
                <description>true if it is symmetric, otherwise false</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="createTask">
        <description>Create a task object, used to represent the motion planning task.
            <br />
            A task object contains informations about:
            <ul>
                <li>collision pairs (used by the default state validity checker)</li>
                <li>state spaces</li>
                <li>start state</li>
                <li>goal state, or goal specification (e.g. pair of dummies, Lua callback, ...)</li>
                <li>various Lua callbacks (projection evaluation, state validation, goal satisfaction)</li>
            </ul>
        </description>
        <categories>
            <category name="task" />
        </categories>
        <params>
            <param name="name" type="string">
                <description>a name for this task object</description>
            </param>
        </params>
        <return>
            <param name="taskHandle" type="string">
                <description>a handle to the created task object</description>
            </param>
        </return>
    </command>
    <command name="destroyTask">
        <description>Destroy the specified task object.
            <br />
            <br />
            Note: task objects created during simulation are automatically destroyed when simulation ends.
        </description>
        <categories>
            <category name="task" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="printTaskInfo">
        <description>Print a summary of the specified task object.
            <br />
            Useful for debugging and submitting bug reports.
        </description>
        <categories>
            <category name="task" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setVerboseLevel">
        <description>Set the verbosity level for messages printed to application console.</description>
        <categories>
            <category name="task" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="verboseLevel" type="int">
                <description>level of verbosity (positive integer), 0 to suppress any message</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setStateValidityCheckingResolution">
        <description>Set the resolution of state validity checking, expressed as fraction of state space's extent.
            <br />
            Default resolution is 0.01 which is 1% of the state space's extent.
        </description>
        <categories>
            <category name="task" />
            <category name="state-validation" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="resolution" type="double">
                <description>resolution of state validity checking, expressed as fraction of state space's extent</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setStateSpace">
        <description>Set the state space of this task object.</description>
        <categories>
            <category name="state-space" />
            <category name="task" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="stateSpaceHandles" type="table" item-type="string">
                <description>a table of handles to state space components, created with <command-ref name="createStateSpace" /></description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="getStateSpaceDimension">
        <description>Get the dimension of the state space, i.e. the number of elements of a state.</description>
        <categories>
            <category name="state-space" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
        </params>
        <return>
            <param name="dim" type="int">
                <description>dimension of the state space</description>
            </param>
        </return>
    </command>
    <command name="setAlgorithm">
        <description>Set the search algorithm for the specified task. Default algorithm used is KPIECE1.</description>
        <categories>
            <category name="task" />
            <category name="planning" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="algorithm" type="int">
                <description>see <enum-ref name="Algorithm" /></description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setCollisionPairs">
        <description>Set the collision pairs for the specified task object.</description>
        <categories>
            <category name="task" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="collisionPairHandles" type="table" item-type="int">
                <description>a table containing 2 entity handles for each collision pair. A collision pair is represented by a collider and a collidee, that will be tested against each other. The collider can be an object or a collection handle. The collidee can be an object or collection handle, or sim_handle_all, in which case the collider will be checked agains all other collidable objects in the scene.</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setStartState">
        <description>Set the start state for the specified task object.</description>
        <categories>
            <category name="task" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="state" type="table" item-type="double">
                <description>a table of numbers, whose size must be consistent with the robot's state space specified in this task object</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setGoalState">
        <description>Set the goal state for the specified task object.</description>
        <categories>
            <category name="task" />
            <category name="goal" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="state" type="table" item-type="double">
                <description>a table of numbers, whose size must be consistent with the robot's state space specified in this task object</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="addGoalState">
        <description>Add a goal state, without clearing previously set goal state(s), if any.</description>
        <categories>
            <category name="task" />
            <category name="goal" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="state" type="table" item-type="double">
                <description>a table of numbers, whose size must be consistent with the robot's state space specified in this task object</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setGoal">
        <description>Set the goal for the specificed task object by a dummy pair.
            <br />
            One of the two dummies is part of the robot. The other dummy is fixed in the environment. When the task is solved, the position or pose of the two dummies will (approximatively) be the same. Dummy-dummy distances are relative to an optional reference dummy, and are evaluated using an optional metric
        </description>
        <categories>
            <category name="task" />
            <category name="goal" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="robotDummy" type="int">
                <description>a dummy attached to the robot</description>
            </param>
            <param name="goalDummy" type="int">
                <description>a dummy fixed in the environment, representing the goal pose/position</description>
            </param>
            <param name="tolerance" type="double" default="0.001">
                <description>tolerated dummy-dummy distance</description>
            </param>
            <param name="metric" type="table" item-type="double" default="{1.0, 1.0, 1.0, 0.1}">
                <description>a metric (x,y,z,angle) used to evaluate the dummy-dummy distance</description>
            </param>
            <param name="refDummy" type="int" default="-1">
                <description>an reference dummy, relative to which the metric will be used</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setup">
        <description>Setup the OMPL classes with the information contained in the task.</description>
        <categories>
            <category name="task" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="solve">
        <description>Run the planning algorithm to search for a solution.</description>
        <categories>
            <category name="planning" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="maxTime" type="float">
                <description>maximum time used for the path searching procedure, in seconds.</description>
            </param>
        </params>
        <return>
            <param name="solved" type="bool">
                <description>true if a solution is found.</description>
            </param>
        </return>
    </command>
    <command name="simplifyPath">
        <description>Simplify the path found by planner.</description>
        <categories>
            <category name="planning" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="maxSimplificationTime" type="float" default="-1.0">
                <description>maximum time used for the path simplification procedure, in seconds. -1 for a default simplification procedure.</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="interpolatePath">
        <description>Interpolate the path found by planner to obtain a minimum number of states.</description>
        <categories>
            <category name="planning" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="stateCnt" type="int" default="0">
                <description>minimum number of states to be returned. 0 for a default behaviour.</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="hasSolution">
        <description>Returns true if a solution path has been found (could be approximate).</description>
        <categories>
            <category name="planning" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
        </params>
        <return>
            <param name="result" type="bool">
                <description>true if a solution path has been found (could be approximate)</description>
            </param>
        </return>
    </command>
    <command name="hasExactSolution">
        <description>Returns true if an exact solution path has been found.
            <br />
            Specifically returns hasSolution() and not hasApproximateSolution()
        </description>
        <categories>
            <category name="planning" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
        </params>
        <return>
            <param name="result" type="bool">
                <description>true if an exact solution path has been found</description>
            </param>
        </return>
    </command>
    <command name="hasApproximateSolution">
        <description>Return true if the top found solution is approximate.
            <br />
            An approximate solution does not actually reach the desired goal, but hopefully is closer to it.
        </description>
        <categories>
            <category name="planning" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
        </params>
        <return>
            <param name="result" type="bool">
                <description>true if the top found solution is approximate</description>
            </param>
        </return>
    </command>
    <command name="getGoalDistance">
        <description>Get the distance to the desired goal for the top solution.</description>
        <categories>
            <category name="planning" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
        </params>
        <return>
            <param name="distance" type="double">
                <description>distance to the desired goal for the top solution, or -1.0 if there are no solutions available</description>
            </param>
        </return>
    </command>
    <command name="getPath">
        <description>Return the top solution path, if one is found.
            <br />
            The top path is the shortest one that was found, preference being given to solutions that are not approximate.
        </description>
        <categories>
            <category name="planning" />
            <category name="path" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
        </params>
        <return>
            <param name="states" type="table" item-type="double">
                <description>a table of states, representing the solution, from start to goal. States are specified linearly.</description>
            </param>
        </return>
    </command>
    <command name="getPlannerData">
        <description>Get planner data for this motion planning task.
            <br />
            Data is represented as a graph. For each graph vertex, a state and a tag are returned. A list of edges is returned as well, as pairs of vertex indices, describing connectivity of vertices. Some vertices are marked start or goal.
        </description>
        <categories>
            <category name="planning" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" />.</description>
            </param>
        </params>
        <return>
            <param name="states" type="table" item-type="double">
                <description>a table of states, representing the configurations in the constructed search graph. States are specified linearly.</description>
            </param>
            <param name="tags" type="table" item-type="int">
                <description>a table of tags (one integer for every vertex)</description>
            </param>
            <param name="tagsReal" type="table" item-type="double">
                <description>a table of tags (one real value for every vertex)</description>
            </param>
            <param name="edges" type="table" item-type="int">
                <description>the pairs of vertex indices describing vertex connectivity</description>
            </param>
            <param name="edgeWeights" type="table" item-type="double">
                <description>the weight (cost) associated to each edge</description>
            </param>
            <param name="startVertices" type="table" item-type="int">
                <description>the indices of vertices marked 'start'</description>
            </param>
            <param name="goalVertices" type="table" item-type="int">
                <description>the indices of vertices marked 'goal'</description>
            </param>
        </return>
    </command>
    <command name="compute">
        <description>Use OMPL to find a solution for this motion planning task.
            <br />
            It is equivalent to executing:
            <code>
if simOMPL.solve(task, maxTime) then
    simOMPL.simplifyPath(task, maxSimplificationTime)
    simOMPL.interpolatePath(task, stateCnt)
    path = simOMPL.getPath(task)
end
            </code>
        </description>
        <categories>
            <category name="planning" />
            <category name="path" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="maxTime" type="float">
                <description>maximum time used for the path searching procedure, in seconds.</description>
            </param>
            <param name="maxSimplificationTime" type="float" default="-1.0">
                <description>maximum time used for the path simplification procedure, in seconds. -1 for a default simplification procedure.</description>
            </param>
            <param name="stateCnt" type="int" default="0">
                <description>minimum number of states to be returned. 0 for a default behaviour.</description>
            </param>
        </params>
        <return>
            <param name="solved" type="bool">
                <description>true if a solution has been found.</description>
            </param>
            <param name="states" type="table" item-type="double">
                <description>a table of states, representing the solution, from start to goal. States are specified linearly.</description>
            </param>
        </return>
    </command>
    <command name="readState">
        <description>Read a state vector from current simulator state.</description>
        <categories>
            <category name="state" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
        </params>
        <return>
            <param name="state" type="table" item-type="double">
                <description>state vector</description>
            </param>
        </return>
    </command>
    <command name="writeState">
        <description>Write the specified state to simulator</description>
        <categories>
            <category name="state" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="state" type="table" item-type="double">
                <description>state vector</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="isStateValid">
        <description>Check if the specified state is valid.
            <br />
            If a state validation callback has been specified, that will be used to determine the validity of the state, otherwise the default state validation method will be used.
        </description>
        <categories>
            <category name="state" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="state" type="table" item-type="double">
                <description>state vector</description>
            </param>
        </params>
        <return>
            <param name="valid" type="bool">
                <description>true if the state is valid</description>
            </param>
        </return>
    </command>
    <command name="isStateWithinBounds">
        <description>Check if the specified state is inside the bounding box.</description>
        <categories>
            <category name="state" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="state" type="table" item-type="double">
                <description>state vector</description>
            </param>
        </params>
        <return>
            <param name="valid" type="bool">
                <description>true if the state is within the bounding box</description>
            </param>
        </return>
    </command>
    <command name="enforceBounds">
        <description>Bring the state within the bounds of the state space.</description>
        <categories>
            <category name="state" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="state" type="table" item-type="double">
                <description>state vector</description>
            </param>
        </params>
        <return>
            <param name="state" type="table" item-type="double">
                <description>state vector</description>
            </param>
        </return>
    </command>
    <command name="stateDistance">
        <description>Compute the distanbce between two states.</description>
        <categories>
            <category name="state" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="a" type="table" item-type="double">
                <description>state vector</description>
            </param>
            <param name="b" type="table" item-type="double">
                <description>state vector</description>
            </param>
        </params>
        <return>
            <param name="distance" type="double">
                <description>computed distance</description>
            </param>
        </return>
    </command>
    <command name="projectStates">
        <description>Project a state using the task's projection evaluation routine.
            <br />
            If multiple states are specified (e.g. a path) multiple projections will be returned.
        </description>
        <categories>
            <category name="state" />
            <category name="projection" />
            <category name="path" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="state" type="table" item-type="double">
                <description>state vector(s)</description>
            </param>
        </params>
        <return>
            <param name="projection" type="table" item-type="double">
                <description>state projection vector(s)</description>
            </param>
        </return>
    </command>
    <command name="setProjectionEvaluationCallback">
        <description>Set a custom projection evaluation.
            See <script-function-ref name="projectionEvaluationCallback" /> for the arguments and the return values of the callback.
        </description>
        <categories>
            <category name="projection" />
            <category name="task" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="callback" type="string">
                <description>name of the Lua callback</description>
            </param>
            <param name="projectionSize" type="int">
                <description>size of the projection (usually 2 or 3)</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setStateValidationCallback">
        <description>Set a custom state validation.
            See <script-function-ref name="stateValidationCallback" /> for the arguments and the return values of the callback.
            <br />
            By default state validation is performed by collision checking, between robot's collision objects and environment's objects. By specifying a custom state validation, it is possible to perform any arbitrary check on a state to determine wether it is valid or not.
        </description>
        <categories>
            <category name="task" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="callback" type="string">
                <description>name of the Lua callback</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setGoalCallback">
        <description>Set a custom goal callback for the specified task.
            See <script-function-ref name="goalCallback" /> for the arguments and the return values of the callback.
            <br />
            If a distance to the goal is not known, a constant value can be used, but the performance of the algorithm will be worse.
        </description>
        <categories>
            <category name="task" />
            <category name="goal" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="callback" type="string">
                <description>name of the Lua callback</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="setValidStateSamplerCallback">
        <description>Set a valid state sampler callbacks for the specified task.
            See <script-function-ref name="validStateSamplerCallback" /> and <script-function-ref name="validStateSamplerCallbackNear" /> for the arguments and the return values of the callbacks.
            <br />
            The valid state sampler callbacks must generate valid states.
        </description>
        <categories>
            <category name="task" />
        </categories>
        <params>
            <param name="taskHandle" type="string">
                <description>a handle to a task object created with <command-ref name="createTask" /></description>
            </param>
            <param name="callback" type="string">
                <description>the name of the Lua callback for sampling a state</description>
            </param>
            <param name="callbackNear" type="string">
                <description>the name of the Lua callback for sampling near a given state within the given distance</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <enum name="Algorithm" item-prefix="algorithm_" base="30001">
        <item name="BiTRRT">
        </item>
        <item name="BITstar">
        </item>
        <item name="BKPIECE1">
        </item>
        <item name="CForest">
        </item>
        <item name="EST">
        </item>
        <item name="FMT">
        </item>
        <item name="KPIECE1">
        </item>
        <item name="LazyPRM">
        </item>
        <item name="LazyPRMstar">
        </item>
        <item name="LazyRRT">
        </item>
        <item name="LBKPIECE1">
        </item>
        <item name="LBTRRT">
        </item>
        <item name="PDST">
        </item>
        <item name="PRM">
        </item>
        <item name="PRMstar">
        </item>
        <!-- parallel planners are not supported:
        <item name="pRRT">
        </item>
        <item name="pSBL">
        </item>
        -->
        <item name="RRT">
        </item>
        <item name="RRTConnect">
        </item>
        <item name="RRTstar">
        </item>
        <item name="SBL">
        </item>
        <item name="SPARS">
        </item>
        <item name="SPARStwo">
        </item>
        <item name="STRIDE">
        </item>
        <item name="TRRT">
        </item>
    </enum>
    <enum name="StateSpaceType" item-prefix="statespacetype_" base="50001">
        <item name="position2d">
        </item>
        <item name="pose2d">
        </item>
        <item name="position3d">
        </item>
        <item name="pose3d">
        </item>
        <item name="joint_position">
        </item>
        <item name="dubins">
        </item>
        <item name="cyclic_joint_position">
        </item>
    </enum>
    <script-function name="goalCallback">
        <description>Callback for checking if the goal is satisfied.</description>
        <params>
            <param name="state" type="table" item-type="double">
                <description>the state to test for goal satisfaction</description>
            </param>
        </params>
        <return>
            <param name="satisfied" type="bool">
                <description>true if satisfied, false otherwise</description>
            </param>
            <param name="distance" type="double">
                <description>distance to goal, if it is known. A constant value can be returned otherwise, but the performance of the algorithm will be worse.</description>
            </param>
        </return>
    </script-function>
    <script-function name="projectionEvaluationCallback">
        <description>Callback for computing a (euclidean) projection of states.</description>
        <params>
            <param name="state" type="table" item-type="double">
                <description>the state to compute the projection for</description>
            </param>
        </params>
        <return>
            <param name="projection" type="table" item-type="double">
                <description>projected state, usualy of size 2 or 3, representing a point in plane or space.</description>
            </param>
        </return>
    </script-function>
    <script-function name="stateValidationCallback">
        <description>Callback for checking the validity of states.</description>
        <params>
            <param name="state" type="table" item-type="double">
                <description>the state to compute the projection for</description>
            </param>
        </params>
        <return>
            <param name="valid" type="bool">
                <description>true if valid, false otherwise</description>
            </param>
        </return>
    </script-function>
    <script-function name="validStateSamplerCallback">
        <description>Callback for sampling valid states from the state space.</description>
        <params>
        </params>
        <return>
            <param name="sampledState" type="table" item-type="double">
                <description>a valid state</description>
            </param>
        </return>
    </script-function>
    <script-function name="validStateSamplerCallbackNear">
        <description>Callback for sampling valid states in the proximity of a given state, within a certain distance.</description>
        <params>
            <param name="state" type="table" item-type="double">
                <description>the center state</description>
            </param>
            <param name="distance" type="double">
                <description>distance bound</description>
            </param>
        </params>
        <return>
            <param name="sampledState" type="table" item-type="double">
                <description>a valid state</description>
            </param>
        </return>
    </script-function>
</plugin>
